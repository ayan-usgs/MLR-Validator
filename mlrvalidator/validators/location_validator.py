
class Location_Validator:

    def __init__(self, site_type_reference, states_reference):
        '''

        :param object site_type_reference: should be a references.SiteTypesCrossField instance
        :param object states_reference: should be a references.States instance
        '''
        self.site_type_ref = site_type_reference
        self.states_ref = states_reference
        self._errors = []
        self._warnings = []

    def validate(self, document, existing_document):
        '''
        After validate is called the error property will reflect the errors generated by the last call to validate
        :param dict document:
        :param dict existing_document:
        :return: boolean
        '''

        merged_document = existing_document.copy()
        merged_document.update(document)

        lat = merged_document.get('latitude', '').strip()
        lon = merged_document.get('longitude', '').strip()
        accuracy_code = merged_document.get('coordinateAccuracyCode', '').strip()
        datum = merged_document.get('coordinateDatumCode', '').strip()
        method_code = merged_document.get('coordinateMethodCode', '').strip()

        site_type = merged_document.get('siteTypeCode', '').strip()
        site_type_ref = self.site_type_ref.get_site_type_field_dependencies(site_type)

        country = merged_document.get('countryCode', '').strip()
        state = merged_document.get('stateFipsCode', '').strip()

        self._errors = []
        self._warnings = []
        valid = True
        if not lat and not lon and not accuracy_code and not datum and not method_code:
            # All are null. Check to see if the site type allows a null location.
            if 'latitude' in site_type_ref.get('notNullAttrs', []):
                valid = False
                self._errors.append({'location': 'For site type {0} you must have a latitude/longitude'.format(site_type)})

        elif lat and lon and accuracy_code and datum and method_code:
            # All are present. Check to see if the site type allows a location
            if 'latitude' in site_type_ref.get('nullAttrs', []):
                valid = False
                self._errors.append({'location': 'For site type {0} you must not have a latitude/longitude'.format(site_type)})

            elif country == 'US' and state:
                # Do a check for lat/lon range using the country and state codes
                state_attr = self.states_ref.get_state_attributes(country, state)
                if state_attr and 'state_min_lat_va' in state_attr and 'state_max_lat_va' in state_attr:
                    if not (state_attr['state_min_lat_va'] <= lat < state_attr['state_max_lat_va']):
                        self._warnings.append({'latitude': 'Latitude is out of range for state {0]'.format(state)})
                if state_attr and 'state_min_long_va' in state_attr and 'state_max_long_va' in state_attr:
                    if not (state_attr['state_min_long_va'] < lon < state_attr['state_max_long_va']):
                        self._warnings.append({'longitude': 'Longitude is out of range for state {0}'.format(state)})

        else:
            # Some fields are null and some are not
            valid = False
            self._errors.append({
                'location': 'The following fields must all be empty or all must not be empty: latitude, longitude, coordinateAccuracyCode, coordinateDatumCode, coordinateMethodCode'
            })
        return valid

    @property
    def errors(self):
        return self._errors

    @property
    def warnings(self):
        return self._warnings